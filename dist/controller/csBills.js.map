{"version":3,"sources":["../../src/controller/csBills.js"],"names":["moment","require","config","db","api","post","authenticate","req","res","newRow","csBills","people","body","method","billNo","total","discount","net","inv_date","inv_date_d","billDate","year","month","day","dateOfPayment","dateofpayment","assignedTo","assignedto","memo","is_active","debit_credit_id","debit_credit_dis","billtype","vat","save","err","send","json","message","_id","get","size","page","colum","text","query","parseInt","sst","count","JSON","parse","countrow","find","populate","path","select","options","limit","skip","exec","data","push","row_count","findById","params","id","row","tz","put","editRow","is_open","delete","remove","key"],"mappings":"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","file":"csBills.js","sourcesContent":["import { Router } from \"express\";\r\nimport csBills from \"../model/csBills\";\r\nimport { authenticate, IsAdmin } from \"../middleware/authMiddleware\";\r\nconst moment = require('moment-timezone');\r\n\r\nexport default ({ config, db }) => {\r\n  let api = Router();\r\n\r\n\r\n  // v1/csbills/add\r\n  api.post(\"/add\", authenticate, (req, res) => {\r\n    let newRow = new csBills();\r\n    newRow.people = req.body.people;\r\n    newRow.method = req.body.method;\r\n    newRow.billNo = req.body.billNo;\r\n    newRow.total = req.body.total;\r\n    newRow.discount = req.body.discount;\r\n    newRow.net = req.body.net;\r\n    const inv_date = req.body.inv_date_d;\r\n    newRow.billDate = inv_date.year + '-' + inv_date.month + '-' + inv_date.day;\r\n    newRow.dateOfPayment = req.body.dateofpayment;\r\n    newRow.assignedTo = req.body.assignedto;\r\n    newRow.memo = req.body.memo;\r\n    newRow.is_active = req.body.is_active;\r\n    newRow.debit_credit_id = req.body.debit_credit_id;\r\n    newRow.debit_credit_dis = req.body.debit_credit_dis;\r\n    newRow.billtype = req.body.billtype;\r\n    newRow.vat = req.body.vat;\r\n    newRow.save(err => {\r\n      if (err) {\r\n        res.send(err);\r\n      } else {\r\n        res.json({ message: \"saved\", _id: newRow._id });\r\n      }\r\n    });\r\n  });\r\n\r\n\r\n  // v1/csbills/   -> get all data\r\n  api.get(\"/\", (req, res) => {\r\n    let size = 20;\r\n    let page = 0;\r\n    let colum = \"\";\r\n    let text = \"\";\r\n    (req.query.page) ? page = parseInt(req.query.page) : page = 0;\r\n    (req.query.size) ? size = parseInt(req.query.size) : size = 20;\r\n    (req.query.colum) ? colum = (req.query.colum) : colum = \"\";\r\n    (req.query.text) ? text = (req.query.text) : text = \"\";\r\n\r\n    if ((colum) && (text)) {\r\n      const sst = '{ \"' + colum + '\": { \"$regex\": \"' + text + '\" , \"$options\": \"i\" } }';\r\n      csBills.count(JSON.parse(sst), (err, countrow) => {\r\n        if (countrow) {\r\n          csBills.find(JSON.parse(sst)).populate({\r\n            path: 'people',\r\n            select: 'name -_id',\r\n            options: {\r\n              limit: size,\r\n              skip: size * page\r\n            }\r\n          }).select({\r\n            \"people\": 1,\r\n            \"billNo\": 1,\r\n            \"net\": 1,\r\n          }).exec((err, data) => {\r\n            if (err) {\r\n              res.send(err);\r\n            }\r\n            data.push({\r\n              'row_count': (countrow) ? countrow : 0\r\n            });\r\n            res.json(data);\r\n          });\r\n        } else {\r\n          res.json([{ row_count: 0 }]);\r\n        }\r\n      });\r\n    } else {\r\n      csBills.count((err, countrow) => {\r\n        const query = csBills.find().populate({\r\n          path: 'people',\r\n          select: 'name -_id',\r\n          options: {\r\n            limit: size,\r\n            skip: size * page\r\n          }\r\n        }).select({\r\n          \"people\": 1,\r\n          \"billNo\": 1,\r\n          \"net\": 1,\r\n        });\r\n        query.exec((err, data) => {\r\n          if (err) {\r\n            res.send(err);\r\n          }\r\n          data.push({\r\n            'row_count': countrow\r\n          });\r\n          res.json(data);\r\n        });\r\n      });\r\n    }\r\n  });\r\n\r\n  // v1/csbills/   -> get all data\r\n  api.get(\"/coded\", (req, res) => {\r\n    csBills.count({ 'is_active': true, 'is_open': true, }, (err, countrow) => {\r\n      const query = csBills.find({ 'is_active': true, 'is_open': true, }).populate({\r\n        path: 'people',\r\n        select: 'name -_id',\r\n      }).populate({\r\n        path: 'method',\r\n        select: 'disc -_id',\r\n      }).populate({\r\n        path: 'billtype',\r\n        select: 'disc -_id',\r\n      }).select({\r\n        \"people\": 1,\r\n        \"method\": 1,\r\n        \"billtype\": 1,\r\n        \"billNo\": 1,\r\n        \"net\": 1,\r\n        \"debit_credit_dis\": 1,\r\n      });\r\n      query.exec((err, data) => {\r\n        if (err) {\r\n          res.send(err);\r\n        }\r\n        data.push({\r\n          'row_count': countrow\r\n        });\r\n        res.json(data);\r\n      });\r\n    });\r\n  });\r\n  // v1/csbills/:id   -> get one row\r\n  api.get(\"/coded/:id\", (req, res) => {\r\n    const query = csBills.findById(req.params.id).populate({\r\n      path: 'people',\r\n      select: 'name -_id',\r\n    }).populate({\r\n      path: 'method',\r\n      select: 'disc -_id',\r\n    }).populate({\r\n      path: 'billtype',\r\n      select: 'disc -_id',\r\n    }).select({\r\n      \"people\": 1,\r\n      \"method\": 1,\r\n      \"billtype\": 1,\r\n      \"billNo\": 1,\r\n      \"net\": 1,\r\n      \"debit_credit_dis\": 1,\r\n    });\r\n    query.exec((err, data) => {\r\n      if (err) {\r\n        res.send(err);\r\n      } else {\r\n        res.json(data);\r\n      }\r\n    });\r\n\r\n  });\r\n  // v1/csbills/:id    git 1 csBill row\r\n  api.get(\"/:id\", (req, res) => {\r\n    csBills.findById(req.params.id, (err, row) => {\r\n      if (err) {\r\n        res.send(err);\r\n      } else {\r\n        row.billDate = moment.tz(row.billDate, \"Asia/Riyadh\");\r\n        res.json(row);\r\n      }\r\n    })\r\n  });\r\n\r\n\r\n  // /v1/csBills/:id    -- put\r\n  api.put(\"/:id\", authenticate, (req, res) => {\r\n    csBills.findById(req.params.id, (err, editRow) => {\r\n      if (err) {\r\n        res.send(err);\r\n      } else {\r\n        editRow.people = req.body.people;\r\n        editRow.method = req.body.method;\r\n        editRow.billNo = req.body.billNo;\r\n        editRow.total = req.body.total;\r\n        editRow.discount = req.body.discount;\r\n        editRow.net = req.body.net;\r\n        const inv_date = req.body.inv_date_d;\r\n        editRow.billDate = inv_date.year + '-' + inv_date.month + '-' + inv_date.day;\r\n        editRow.dateOfPayment = req.body.dateofpayment;\r\n        editRow.assignedTo = req.body.assignedto;\r\n        editRow.memo = req.body.memo;\r\n        editRow.is_active = req.body.is_active;\r\n        editRow.debit_credit_id = req.body.debit_credit_id;\r\n        editRow.debit_credit_dis = req.body.debit_credit_dis;\r\n        editRow.billtype = req.body.billtype;\r\n        editRow.vat = req.body.vat;\r\n        editRow.save(err => {\r\n          if (err) {\r\n            res.send(err);\r\n          } else {\r\n            res.json({ message: \"update\" });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  // /v1/csBills/:id    -- put\r\n  api.put(\"/close/:id\", authenticate, (req, res) => {\r\n    csBills.findById(req.params.id, (err, editRow) => {\r\n      if (err) {\r\n        res.send(err);\r\n      } else {\r\n        editRow.is_open = false ;\r\n        editRow.save(err => {\r\n          if (err) {\r\n            res.send(err);\r\n          } else {\r\n            res.json({ message: \"update\" });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  // /v1/csBills/:id    -- delete\r\n  api.delete(\"/:id\", authenticate, (req, res) => {\r\n    csBills.remove({ _id: req.params.id }, (err, key) => {\r\n      if (err) {\r\n        res.send(err);\r\n      }\r\n      res.json({ message: \"remove\" });\r\n    });\r\n  });\r\n  //====================================================\r\n\r\n  return api;\r\n};\r\n"]}