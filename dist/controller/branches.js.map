{"version":3,"sources":["../../src/controller/branches.js"],"names":["config","db","api","post","authenticate","IsAdmin","req","res","newbranches","branches","name","body","url","tokin","is_active","save","err","send","json","message","_id","get","size","page","colum","text","query","parseInt","find","where","equals","exec","data","s","toJSON","add_dirct","arr","split","length","or","$regex","$options","id","limit","skip","serch_arr","forEach","element","push","and","sst","count","JSON","parse","countrow","findById","params","put","delete","remove"],"mappings":"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","file":"branches.js","sourcesContent":["import { Router } from \"express\";\r\nimport branches from \"../model/branches\";\r\nimport { authenticate, IsAdmin } from \"../middleware/authMiddleware\";\r\n\r\n//import bodyParser from 'body-parser' ;\r\n\r\nexport default ({ config, db }) => {\r\n  let api = Router();\r\n  // v1/branches/add\r\n  api.post(\"/add\", authenticate, IsAdmin ,  (req, res) => {\r\n \r\n    let newbranches = new branches(); \r\n    newbranches.name = req.body.name;\r\n    newbranches.url = req.body.url;\r\n    newbranches.tokin = req.body.tokin;\r\n    newbranches.is_active = req.body.is_active;\r\n    newbranches.save(err => {\r\n      if (err) {\r\n        return res.send(err);\r\n      }\r\n      return res.json({ message: \"saved\", _id: newbranches._id });\r\n    });\r\n  });\r\n  //************************* */\r\n  // v1/branches/   -> get all data\r\n  // v1/item/   -> get all data\r\n  api.get(\"/\", (req, res) => {\r\n    let size = 20;\r\n    let page = 0;\r\n    let colum = \"\";\r\n    let text = \"\";\r\n    (req.query.page) ? page = parseInt(req.query.page) : page = 0;\r\n    (req.query.size) ? size = parseInt(req.query.size) : size = 20;\r\n    (req.query.colum) ? colum = (req.query.colum) : colum = \"\";\r\n    (req.query.text) ? text = (req.query.text) : text = \"\";\r\n\r\n    if ((colum) && (text)) {\r\n      if (colum === '*') {\r\n        branches.find()\r\n          .where('id').equals(text)\r\n          .exec((err, data) => {\r\n            if (data[0]) {\r\n                let s = data[0].toJSON();\r\n                s.add_dirct = true;\r\n                return res.json(s);\r\n            } else {\r\n              const arr = text.split(\" \");\r\n              if (arr.length === 1) {\r\n                branches.find()\r\n                  .or([{ name: { $regex: text, $options: 'i' } }, { id: { $regex: text, $options: 'i' } }])\r\n                  .limit(size)\r\n                  .skip(size * page)\r\n                  .exec((err, data) => {\r\n                    return res.json(data);\r\n                  });\r\n              } else if (arr.length > 1) {\r\n                let serch_arr = [];\r\n                arr.forEach((element) => {\r\n                  serch_arr.push({ name: { $regex: element, $options: 'i' } })\r\n                });\r\n                branches.find()\r\n                  .and(serch_arr)\r\n                  .limit(size)\r\n                  .skip(size * page)\r\n                  .exec((err, data) => {\r\n                    return res.json(data);\r\n                  });\r\n              }\r\n            }\r\n          });\r\n\r\n      } else {\r\n        const sst = '{ \"' + colum + '\": { \"$regex\": \"' + text + '\" , \"$options\": \"i\" } }';\r\n        branches.count(JSON.parse(sst), (err, countrow) => {\r\n          branches.find(JSON.parse(sst)).limit(size).skip(size * page).exec((err, data) => {\r\n            if (err) {\r\n              return res.send(err);\r\n            }\r\n            data.push({\r\n              'row_count': countrow\r\n            });\r\n            return res.json(data);\r\n          });\r\n        });\r\n\r\n      }\r\n    } else {\r\n      branches.count((err, countrow) => {\r\n        branches.find().skip(size * page).limit(size).exec((err, data) => {\r\n          if (err) {\r\n            return res.send(err);\r\n          }\r\n          data.push({\r\n            'row_count': countrow\r\n          });\r\n          return res.json(data);\r\n          return res.json(data);\r\n        });\r\n      });\r\n    }\r\n\r\n  });\r\n  // /v1/branches/:id\r\n  api.get(\"/:id\", (req, res) => {\r\n    branches.findById(req.params.id, (err, branches) => {\r\n      if (err) {\r\n        return res.send(err);\r\n      }\r\n      return res.json(branches);\r\n    });\r\n  });\r\n  // /v1/branches/:id    -- put\r\n  api.put(\"/:id\", authenticate, (req, res) => {\r\n    branches.findById(req.params.id, (err, branches) => {\r\n      if (err) {\r\n        res.send(err);\r\n      }\r\n      branches.name = req.body.name;\r\n      branches.url = req.body.url;\r\n      branches.tokin = req.body.tokin;\r\n      branches.is_active = req.body.is_active;\r\n      branches.save(err => {\r\n        if (err) {\r\n          return res.send(err);\r\n        }\r\n        return res.json({ message: \"update\" });\r\n      });\r\n    });\r\n  });\r\n  // /v1/branches/:id    -- delete\r\n  api.delete(\"/:id\", authenticate, (req, res) => {\r\n    branches.remove({ _id: req.params.id }, (err, branches) => {\r\n      if (err) {\r\n        return res.send(err);\r\n      }\r\n      return res.json({ message: \"remove\" });\r\n    });\r\n  });\r\n  //====================================================\r\n  return api;\r\n};\r\n"]}